---
description: 
globs: 
alwaysApply: true
---
# FE Infinity LT Development Reference

## Project Info

FE Infinity is an AI system that connects with Lex Talionis (LT) to create a Fire Emblem game as you play it. The battle objectives you complete, the characters who die, and your decisions in the dialogue will go into the creation of the next chapter.

The Lex Talionis Fire Emblem Engine is a custom-built engine designed for creating fan games inspired by the Fire Emblem series. It is a Python-based engine that emulates the mechanics of traditional Fire Emblem games while providing creators with powerful tools to build their own custom campaigns.

I’m editing this project to generate each chapter on the fly using LLMs.

Because Lex Talionis was meant for Windows and I’m developing on a mac, I’m using wine to run it.

I’m trying to make as few changes to lt-maker as possible, which is the game engine, I have a separate Deno 2 server in /server that will modify game files within the lt-maker repo. However sometimes I have to call python scripts directly in the game engine directory.

If you need to call a python script from the server, use runPythonScript in a .ts file.

The monorepo is broken up by:
/client : This has a next.js app, its server actions call the deno server
/server : deno server to manipulate files within the game engine
/lt-maker : the game engine

In the client, when calling server use the provided apiCall function.

When naming files, use kebab case for .ts and snake case for .py

We should make changes to /lt-maker incredibly sparingly - we should try to do all the work in /client and /server

## Build & Run Commands
- Start everything: `just start`
- Client only: `just start-client`
- Server only: `just start-server`
- LT Editor: `just editor`
- Clean up: `just reset` or `just clean`
- Process assets: `just process-maps`, `just process-portraits`, `just process-music`, `just process-items`
- Client build: `cd client && pnpm build`
- Client lint: `cd client && pnpm lint`

## Code Style Guidelines
- **Imports**: Group imports by source (React, third-party libs, local modules with @ paths first)
- **Naming**: camelCase for variables/functions, PascalCase for components/classes/types, kebab-case for files
- **Types**: Always use explicit TypeScript types; avoid `any`; prefer interfaces for object types
- **Error Handling**: Use try/catch with specific error logging; for API calls, handle network and business errors separately
- **Components**: Prefer functional components with explicit prop types; use destructuring for props
- **Formatting**: 2-space indentation; use semicolons; line width ~80 chars
- **State Management**: Use React hooks (useState, useEffect) for component state; avoid global state when possible
- **File Structure**: Keep related files together; UI components in components/ui; route components in routes/
